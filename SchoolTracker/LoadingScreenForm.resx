<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="backgroundWorker.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAPgAAAH8AAAD/gAAB/8AAA//gAAf/+AAf8=
</value>
  </data>
</root>